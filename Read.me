Project 1 Summary and Requirements

Executive Summary â€“ Employee Reimbursement System (ERS)

The goal of project 1 is to create a Java Full Stack Employee Reimbursement System (ERS). The main use case of the ERS centers around Employees submitting Reimbursements that can either be accepted or denied by Managers. The tech stack will consist of a React-Based Front end, communicating via HTTP to a Spring-Based Back end. The database will be either a local or cloud-based Postgres database. The entire application will have error handling in place to prevent the user from invoking unauthorized functionalities or entering invalid inputs.

Employee User Stories

Users using the application can:

Â· Create an account (create new User â€“ default role should be employee)

Â· Create a new Reimbursement

Â· See all reimbursement tickets (only their own)

Â· See only their pending reimbursement tickets

Â· [Some other functionality of your choice]

Â· OPTIONAL: Update the description of a pending reimbursement


Manager User Stories

Managers using the application can:

Â· See all reimbursements

Â· See all pending reimbursements

Â· Resolve a reimbursement

o (update status from PENDING to APPROVED or DENIED)

Â· See all Users

Â· Delete a User

o (should also delete any related reimbursements)

Â· OPTIONAL: Update an employeeâ€™s role to manager

*Managers can do anything Users can do. No need for role checks on User functionalities.


Validation User Stories (Do Login Last!!)

Users who are not logged in to the application can ONLY:

Â· Attempt to log in.

Users should not be able to access the other user stories before logging in.


Optional User Stories (Only try these after completing the stories above)

Â· Logging of the Service layer with logback.

Â· Test Suites for the Service layer with JUnit

Â· Log out

Both testing and logging will be required for P2, so this could be good practice!


Database Architecture

Â· Change table columns as you see fit, but keep in mind that the diagram shows the absolute minimum requirements.

Â· Add constraints to the tables as you see fit, and make sure to error handle for them!

Remember to consult the demo, your peers, and google ðŸŽ‰ and Ben

Â· How are these graded?

o If you have all the functionalities working front-end to back-end thatâ€™s a blue

o If you have almost all of the functionalities (maybe missing 1-2), thatâ€™s green

o Missing about 25% of the stories brings you to lime

o If you have just a few working, thatâ€™s yellow territory

o Very little to nothing done is red